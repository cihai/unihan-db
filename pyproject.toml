[tool.poetry]
name = "unihan_db"
version = "0.4.0a0"
description = "SQLAlchemy models for UNIHAN CJK database"
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]
classifiers = [
  'Development Status :: 4 - Beta',
  "License :: OSI Approved :: MIT License",
  'Environment :: Web Environment',
  'Intended Audience :: Developers',
  'Programming Language :: Python',
  'Programming Language :: Python :: 3',
  'Programming Language :: Python :: 3.7',
  'Programming Language :: Python :: 3.8',
  'Programming Language :: Python :: 3.9',
  'Programming Language :: Python :: 3.10',
  'Programming Language :: Python :: Implementation :: PyPy',
  "Topic :: Database",
  "Topic :: Utilities",
  "Topic :: Software Development :: Internationalization"
]
keywords = ["unihan", "sqlalchemy", "cjk", "chinese", "japanese", "sql", "database"]

readme = 'README.md'
packages = [
    { include = "unihan_db" }
]
include = [
    { path = "tests", format = "sdist" }
]

homepage = "https://unihan-db.git-pull.com"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/cihai/unihan-db/issues"
Documentation = "https://unihan-db.git-pull.com"
Repository = "https://github.com/cihai/unihan-db"


[tool.poetry.dependencies]
python = "^3.7"
appdirs = "*"
SQLAlchemy = "*"
unihan-etl = "~=0.14.0a0"

[tool.poetry.dev-dependencies]
### Docs ###
sphinx = "*"
furo = "^2022.2.23"
sphinx-autobuild = "^2021.3.14"
sphinx-autodoc-typehints = "~1.17.0"
sphinx-issues = "^3.0.0"
sphinx-inline-tabs = { version = "*", python = "^3.7" }
sphinxext-opengraph = "*"
sphinx-copybutton = "^0.5.0"
sphinxext-rediraffe = "*"
myst_parser = "~0.17.0"

### Testing ###
pytest = "*"
pytest-rerunfailures = "*"
pytest-watcher = "^0.2.3"

### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

### Format ###
black = "*"
isort = "*"

### Lint ###
flake8 = "*"

[tool.poetry.extras]
docs = ["sphinx", "sphinx-issues", "sphinx-autodoc-typehints", "sphinx-autobuild", "sphinx-copybutton", "sphinxext-opengraph", "sphinx-inline-tabs", "sphinxext-rediraffe", "myst_parser", "furo"]
test = ["pytest", "pytest-rerunfailures", "pytest-watcher"]
coverage = ["codecov", "coverage", "pytest-cov"]
format = ["black", "isort"]
lint = ["flake8"]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
